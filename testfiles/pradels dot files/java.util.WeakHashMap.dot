digraph Automaton {
  rankdir = LR;
  0 [shape=doublecircle,label=""];
  0 -> 2 [label="#3.java.util.Iterator.remove() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#2.java.util.Collection.iterator() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.WeakHashMap.values() [1]",style="setlinewidth(1)",color=gray]
  0 -> 4 [label="#3.java.util.Iterator.hasNext() [1]",style="setlinewidth(1)",color=gray]
  1 [shape=doublecircle,label=""];
  1 -> 1 [label="#2.java.util.Collection.iterator() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.WeakHashMap.values() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#3.java.util.Iterator.hasNext() [1]",style="setlinewidth(1)",color=gray]
  1 -> 0 [label="#3.java.util.Iterator.next() [1]",style="setlinewidth(1)",color=gray]
  2 [shape=doublecircle,label=""];
  2 -> 2 [label="#2.java.util.Collection.iterator() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.WeakHashMap.values() [1]",style="setlinewidth(1)",color=gray]
  2 -> 1 [label="#3.java.util.Iterator.hasNext() [1]",style="setlinewidth(1)",color=gray]
  3 [shape=doublecircle,label=""];
  3 -> 3 [label="#1.java.util.WeakHashMap.entrySet() [1]",style="setlinewidth(1)",color=gray]
  3 -> 3 [label="#1.java.util.WeakHashMap.keySet() [1]",style="setlinewidth(1)",color=gray]
  3 -> 3 [label="#1.java.util.WeakHashMap.remove() [1]",style="setlinewidth(1)",color=gray]
  3 -> 3 [label="#1.java.util.WeakHashMap.clear() [1]",style="setlinewidth(1)",color=gray]
  3 -> 6 [label="#1.java.util.WeakHashMap.values() [1]",style="setlinewidth(1)",color=gray]
  3 -> 3 [label="#1.java.util.WeakHashMap.containsKey() [1]",style="setlinewidth(1)",color=gray]
  3 -> 3 [label="#1.java.util.WeakHashMap.get() [1]",style="setlinewidth(1)",color=gray]
  3 -> 3 [label="#1.java.util.WeakHashMap.put() [1]",style="setlinewidth(1)",color=gray]
  3 -> 3 [label="#1.java.util.WeakHashMap.containsValue() [1]",style="setlinewidth(1)",color=gray]
  3 -> 3 [label="#1.java.util.WeakHashMap.putAll() [1]",style="setlinewidth(1)",color=gray]
  3 -> 3 [label="#1.java.util.WeakHashMap.size() [1]",style="setlinewidth(1)",color=gray]
  3 -> 3 [label="#1.java.util.WeakHashMap.isEmpty() [1]",style="setlinewidth(1)",color=gray]
  4 [shape=doublecircle,label=""];
  4 -> 1 [label="#3.java.util.Iterator.remove() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#2.java.util.Collection.iterator() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.WeakHashMap.values() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#3.java.util.Iterator.hasNext() [1]",style="setlinewidth(1)",color=gray]
  4 -> 0 [label="#3.java.util.Iterator.next() [1]",style="setlinewidth(1)",color=gray]
  5 [shape=circle,label=""];
  initial [shape=plaintext,label=""];
  initial -> 5
  5 -> 3 [label="#1.java.util.WeakHashMap.<init>() [1]",style="setlinewidth(1)",color=gray]
  6 [shape=doublecircle,label=""];
  6 -> 6 [label="#1.java.util.WeakHashMap.clear() [1]",style="setlinewidth(1)",color=gray]
  6 -> 6 [label="#1.java.util.WeakHashMap.values() [1]",style="setlinewidth(1)",color=gray]
  6 -> 6 [label="#1.java.util.WeakHashMap.containsKey() [1]",style="setlinewidth(1)",color=gray]
  6 -> 6 [label="#1.java.util.WeakHashMap.get() [1]",style="setlinewidth(1)",color=gray]
  6 -> 6 [label="#1.java.util.WeakHashMap.containsValue() [1]",style="setlinewidth(1)",color=gray]
  6 -> 6 [label="#1.java.util.WeakHashMap.putAll() [1]",style="setlinewidth(1)",color=gray]
  6 -> 6 [label="#1.java.util.WeakHashMap.isEmpty() [1]",style="setlinewidth(1)",color=gray]
  6 -> 6 [label="#1.java.util.WeakHashMap.entrySet() [1]",style="setlinewidth(1)",color=gray]
  6 -> 6 [label="#1.java.util.WeakHashMap.keySet() [1]",style="setlinewidth(1)",color=gray]
  6 -> 6 [label="#1.java.util.WeakHashMap.remove() [1]",style="setlinewidth(1)",color=gray]
  6 -> 2 [label="#2.java.util.Collection.iterator() [1]",style="setlinewidth(1)",color=gray]
  6 -> 6 [label="#1.java.util.WeakHashMap.put() [1]",style="setlinewidth(1)",color=gray]
  6 -> 6 [label="#1.java.util.WeakHashMap.size() [1]",style="setlinewidth(1)",color=gray]
}
