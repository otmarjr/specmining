digraph Automaton {
  rankdir = LR;
  0 [shape=doublecircle,label=""];
  0 -> 0 [label="#2.java.util.Collection.iterator() [1]",style="setlinewidth(1)",color=gray]
  0 -> 6 [label="#3.java.util.Iterator.remove() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.NavigableMap.values() [1]",style="setlinewidth(1)",color=gray]
  0 -> 5 [label="#3.java.util.Iterator.hasNext() [1]",style="setlinewidth(1)",color=gray]
  1 [shape=doublecircle,label=""];
  1 -> 1 [label="#1.java.util.NavigableMap.keySet() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.pollFirstEntry() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.floorEntry() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.containsKey() [1]",style="setlinewidth(1)",color=gray]
  1 -> 4 [label="#1.java.util.NavigableMap.values() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.isEmpty() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.containsValue() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.subMap() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.descendingKeySet() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.floorKey() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.put() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.descendingMap() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.get() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.lastEntry() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.pollLastEntry() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.tailMap() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.higherEntry() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.lowerEntry() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.ceilingEntry() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.remove() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.ceilingKey() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.headMap() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.lastKey() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.clear() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.entrySet() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.size() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.putAll() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.comparator() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.firstEntry() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.higherKey() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.navigableKeySet() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.firstKey() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.NavigableMap.lowerKey() [1]",style="setlinewidth(1)",color=gray]
  2 [shape=doublecircle,label=""];
  2 -> 2 [label="#2.java.util.Collection.iterator() [1]",style="setlinewidth(1)",color=gray]
  2 -> 0 [label="#3.java.util.Iterator.next() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.NavigableMap.values() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#3.java.util.Iterator.hasNext() [1]",style="setlinewidth(1)",color=gray]
  3 [shape=circle,label=""];
  initial [shape=plaintext,label=""];
  initial -> 3
  3 -> 1 [label="#1.java.util.NavigableMap.<init>() [1]",style="setlinewidth(1)",color=gray]
  4 [shape=doublecircle,label=""];
  4 -> 4 [label="#1.java.util.NavigableMap.keySet() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.pollFirstEntry() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.floorEntry() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.containsKey() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.values() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.isEmpty() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.containsValue() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.subMap() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.descendingKeySet() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.floorKey() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.put() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.descendingMap() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.get() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.lastEntry() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.pollLastEntry() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.tailMap() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.higherEntry() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.lowerEntry() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.ceilingEntry() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.remove() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.ceilingKey() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.headMap() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.lastKey() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.clear() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.entrySet() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.size() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.putAll() [1]",style="setlinewidth(1)",color=gray]
  4 -> 6 [label="#2.java.util.Collection.iterator() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.comparator() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.firstEntry() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.higherKey() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.navigableKeySet() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.firstKey() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.NavigableMap.lowerKey() [1]",style="setlinewidth(1)",color=gray]
  5 [shape=doublecircle,label=""];
  5 -> 5 [label="#2.java.util.Collection.iterator() [1]",style="setlinewidth(1)",color=gray]
  5 -> 2 [label="#3.java.util.Iterator.remove() [1]",style="setlinewidth(1)",color=gray]
  5 -> 0 [label="#3.java.util.Iterator.next() [1]",style="setlinewidth(1)",color=gray]
  5 -> 5 [label="#1.java.util.NavigableMap.values() [1]",style="setlinewidth(1)",color=gray]
  5 -> 5 [label="#3.java.util.Iterator.hasNext() [1]",style="setlinewidth(1)",color=gray]
  6 [shape=doublecircle,label=""];
  6 -> 6 [label="#2.java.util.Collection.iterator() [1]",style="setlinewidth(1)",color=gray]
  6 -> 6 [label="#1.java.util.NavigableMap.values() [1]",style="setlinewidth(1)",color=gray]
  6 -> 2 [label="#3.java.util.Iterator.hasNext() [1]",style="setlinewidth(1)",color=gray]
}
