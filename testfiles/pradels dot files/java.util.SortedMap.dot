digraph Automaton {
  rankdir = LR;
  0 [shape=doublecircle,label=""];
  0 -> 0 [label="#1.java.util.SortedMap.subMap() [1]",style="setlinewidth(1)",color=gray]
  0 -> 5 [label="#2.java.util.Collection.iterator() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedMap.clear() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedMap.put() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedMap.comparator() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedMap.entrySet() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedMap.size() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedMap.containsKey() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedMap.isEmpty() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedMap.values() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedMap.firstKey() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedMap.containsValue() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedMap.get() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedMap.keySet() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedMap.putAll() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedMap.tailMap() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedMap.headMap() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedMap.remove() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedMap.lastKey() [1]",style="setlinewidth(1)",color=gray]
  1 [shape=doublecircle,label=""];
  1 -> 1 [label="#2.java.util.Collection.iterator() [1]",style="setlinewidth(1)",color=gray]
  1 -> 5 [label="#3.java.util.Iterator.remove() [1]",style="setlinewidth(1)",color=gray]
  1 -> 3 [label="#3.java.util.Iterator.hasNext() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.SortedMap.values() [1]",style="setlinewidth(1)",color=gray]
  2 [shape=doublecircle,label=""];
  2 -> 2 [label="#1.java.util.SortedMap.subMap() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.SortedMap.clear() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.SortedMap.put() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.SortedMap.comparator() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.SortedMap.entrySet() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.SortedMap.size() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.SortedMap.containsKey() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.SortedMap.isEmpty() [1]",style="setlinewidth(1)",color=gray]
  2 -> 0 [label="#1.java.util.SortedMap.values() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.SortedMap.firstKey() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.SortedMap.containsValue() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.SortedMap.get() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.SortedMap.keySet() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.SortedMap.putAll() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.SortedMap.tailMap() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.SortedMap.headMap() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.SortedMap.remove() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.SortedMap.lastKey() [1]",style="setlinewidth(1)",color=gray]
  3 [shape=doublecircle,label=""];
  3 -> 3 [label="#2.java.util.Collection.iterator() [1]",style="setlinewidth(1)",color=gray]
  3 -> 4 [label="#3.java.util.Iterator.remove() [1]",style="setlinewidth(1)",color=gray]
  3 -> 1 [label="#3.java.util.Iterator.next() [1]",style="setlinewidth(1)",color=gray]
  3 -> 3 [label="#3.java.util.Iterator.hasNext() [1]",style="setlinewidth(1)",color=gray]
  3 -> 3 [label="#1.java.util.SortedMap.values() [1]",style="setlinewidth(1)",color=gray]
  4 [shape=doublecircle,label=""];
  4 -> 4 [label="#2.java.util.Collection.iterator() [1]",style="setlinewidth(1)",color=gray]
  4 -> 1 [label="#3.java.util.Iterator.next() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#3.java.util.Iterator.hasNext() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.SortedMap.values() [1]",style="setlinewidth(1)",color=gray]
  5 [shape=doublecircle,label=""];
  5 -> 5 [label="#2.java.util.Collection.iterator() [1]",style="setlinewidth(1)",color=gray]
  5 -> 4 [label="#3.java.util.Iterator.hasNext() [1]",style="setlinewidth(1)",color=gray]
  5 -> 5 [label="#1.java.util.SortedMap.values() [1]",style="setlinewidth(1)",color=gray]
  6 [shape=circle,label=""];
  initial [shape=plaintext,label=""];
  initial -> 6
  6 -> 2 [label="#1.java.util.SortedMap.<init>() [1]",style="setlinewidth(1)",color=gray]
}
