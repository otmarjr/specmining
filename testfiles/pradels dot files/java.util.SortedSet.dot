digraph Automaton {
  rankdir = LR;
  0 [shape=doublecircle,label=""];
  0 -> 0 [label="#1.java.util.SortedSet.retainAll() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedSet.tailSet() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedSet.add() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#2.java.util.[C] pollFirst() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedSet.addAll() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedSet.contains() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedSet.removeAll() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedSet.clear() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedSet.isEmpty() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedSet.subSet() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedSet.containsAll() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedSet.comparator() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedSet.first() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedSet.last() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#2.java.util.[C] pollLast() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedSet.size() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedSet.headSet() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.SortedSet.remove() [1]",style="setlinewidth(1)",color=gray]
  0 -> 4 [label="#1.java.util.SortedSet.iterator() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#2.java.util.[C] lower() [1]",style="setlinewidth(1)",color=gray]
  1 [shape=doublecircle,label=""];
  1 -> 2 [label="#3.java.util.Iterator.next() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#3.java.util.Iterator.hasNext() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.SortedSet.iterator() [1]",style="setlinewidth(1)",color=gray]
  2 [shape=doublecircle,label=""];
  2 -> 5 [label="#3.java.util.Iterator.hasNext() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.SortedSet.iterator() [1]",style="setlinewidth(1)",color=gray]
  2 -> 4 [label="#3.java.util.Iterator.remove() [1]",style="setlinewidth(1)",color=gray]
  3 [shape=circle,label=""];
  initial [shape=plaintext,label=""];
  initial -> 3
  3 -> 0 [label="#1.java.util.SortedSet.<init>() [1]",style="setlinewidth(1)",color=gray]
  4 [shape=doublecircle,label=""];
  4 -> 1 [label="#3.java.util.Iterator.hasNext() [1]",style="setlinewidth(1)",color=gray]
  4 -> 4 [label="#1.java.util.SortedSet.iterator() [1]",style="setlinewidth(1)",color=gray]
  5 [shape=doublecircle,label=""];
  5 -> 2 [label="#3.java.util.Iterator.next() [1]",style="setlinewidth(1)",color=gray]
  5 -> 5 [label="#3.java.util.Iterator.hasNext() [1]",style="setlinewidth(1)",color=gray]
  5 -> 5 [label="#1.java.util.SortedSet.iterator() [1]",style="setlinewidth(1)",color=gray]
  5 -> 1 [label="#3.java.util.Iterator.remove() [1]",style="setlinewidth(1)",color=gray]
}
