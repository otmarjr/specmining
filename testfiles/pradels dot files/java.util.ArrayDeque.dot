digraph Automaton {
  rankdir = LR;
  0 [shape=doublecircle,label=""];
  0 -> 0 [label="#1.java.util.ArrayDeque.iterator() [1]",style="setlinewidth(1)",color=gray]
  0 -> 1 [label="#2.java.util.Iterator.next() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#1.java.util.ArrayDeque.descendingIterator() [1]",style="setlinewidth(1)",color=gray]
  0 -> 0 [label="#2.java.util.Iterator.hasNext() [1]",style="setlinewidth(1)",color=gray]
  1 [shape=doublecircle,label=""];
  1 -> 1 [label="#1.java.util.ArrayDeque.iterator() [1]",style="setlinewidth(1)",color=gray]
  1 -> 1 [label="#1.java.util.ArrayDeque.descendingIterator() [1]",style="setlinewidth(1)",color=gray]
  1 -> 3 [label="#2.java.util.Iterator.hasNext() [1]",style="setlinewidth(1)",color=gray]
  1 -> 5 [label="#2.java.util.Iterator.remove() [1]",style="setlinewidth(1)",color=gray]
  2 [shape=doublecircle,label=""];
  2 -> 2 [label="#1.java.util.ArrayDeque.pollFirst() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.removeFirst() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.offer() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.clear() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.poll() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.contains() [1]",style="setlinewidth(1)",color=gray]
  2 -> 5 [label="#1.java.util.ArrayDeque.iterator() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.containsAll() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.offerFirst() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.removeLast() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.element() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.offerLast() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.pollLast() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.removeFirstOccurrence() [1]",style="setlinewidth(1)",color=gray]
  2 -> 5 [label="#1.java.util.ArrayDeque.descendingIterator() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.peekFirst() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.push() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.add() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.retainAll() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.addAll() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.peek() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.pop() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.addFirst() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.getFirst() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.size() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.removeLastOccurrence() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.addLast() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.getLast() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.peekLast() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.removeAll() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.isEmpty() [1]",style="setlinewidth(1)",color=gray]
  2 -> 2 [label="#1.java.util.ArrayDeque.remove() [1]",style="setlinewidth(1)",color=gray]
  3 [shape=doublecircle,label=""];
  3 -> 3 [label="#1.java.util.ArrayDeque.iterator() [1]",style="setlinewidth(1)",color=gray]
  3 -> 1 [label="#2.java.util.Iterator.next() [1]",style="setlinewidth(1)",color=gray]
  3 -> 3 [label="#1.java.util.ArrayDeque.descendingIterator() [1]",style="setlinewidth(1)",color=gray]
  3 -> 3 [label="#2.java.util.Iterator.hasNext() [1]",style="setlinewidth(1)",color=gray]
  3 -> 0 [label="#2.java.util.Iterator.remove() [1]",style="setlinewidth(1)",color=gray]
  4 [shape=circle,label=""];
  initial [shape=plaintext,label=""];
  initial -> 4
  4 -> 2 [label="#1.java.util.ArrayDeque.<init>() [1]",style="setlinewidth(1)",color=gray]
  5 [shape=doublecircle,label=""];
  5 -> 5 [label="#1.java.util.ArrayDeque.iterator() [1]",style="setlinewidth(1)",color=gray]
  5 -> 5 [label="#1.java.util.ArrayDeque.descendingIterator() [1]",style="setlinewidth(1)",color=gray]
  5 -> 0 [label="#2.java.util.Iterator.hasNext() [1]",style="setlinewidth(1)",color=gray]
}
